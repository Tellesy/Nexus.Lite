plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.github.ben-manes.versions") version "0.51.0"
    id 'org.liquibase.gradle' version '2.2.0'
}




group = 'ly.neptune'
version = '1.2.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.spring.io/milestone' }
    maven { url = 'https://repo.spring.io/release' }
}

springBoot {
    buildInfo()
}

// Determine packaging type: default is 'jar'
def packagingType = project.findProperty('packagingType') ?: 'jar'

if (packagingType == 'war') {
    // --- WAR mode: apply the war plugin and enable bootWar ---
    apply plugin: 'war'

    // Disable JAR tasks:
    tasks.named('bootJar') {
        enabled = false
    }
    tasks.named('jar') {
        enabled = false
    }
    // Enable bootWar (executable WAR) and disable the plain war task:
    tasks.named('bootWar') {
        enabled = true
    }
    tasks.findByName('war')?.enabled = false

    // Exclude embedded Tomcat and logging so that WildFly’s implementations are used:
    configurations.all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    dependencies {
        // Provide Tomcat so it's available at runtime but not packaged:
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }
} else {
    // --- JAR mode: disable WAR tasks and enable both bootJar and jar ---
    if (project.tasks.findByName('bootWar')) {
        tasks.named('bootWar') {
            enabled = false
        }
    }
    if (project.tasks.findByName('war')) {
        tasks.named('war') {
            enabled = false
        }
    }
    tasks.named('bootJar') {
        enabled = true   // Fat (executable) JAR with dependencies
    }
    tasks.named('jar') {
        enabled = true   // Plain JAR (without dependencies)
    }

    // Attach the plain JAR to the archives configuration so it’s produced by the build:
    artifacts {
        archives tasks.jar
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-web-services")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("com.vaadin:vaadin-spring-boot-starter:24.3.0")
    implementation("org.yaml:snakeyaml:2.0")

    // Database support
    implementation 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // Oracle JDBC driver
    implementation 'com.oracle.database.jdbc:ojdbc8:23.6.0.24.10'

    // SOAP Web Services
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
    implementation("org.glassfish.jaxb:jaxb-runtime:4.0.5")
    implementation("jakarta.jws:jakarta.jws-api:3.0.0")
    implementation("jakarta.xml.ws:jakarta.xml.ws-api:4.0.2")
    implementation("jakarta.xml.soap:jakarta.xml.soap-api:3.0.2")
    implementation("com.sun.xml.messaging.saaj:saaj-impl:3.0.4")
    compileOnly("jakarta.servlet:jakarta.servlet-api:6.1.0")

    // Lombok
    implementation("org.projectlombok:lombok:1.18.36")
    annotationProcessor("org.projectlombok:lombok:1.18.36")
    testImplementation("org.projectlombok:lombok:1.18.36")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.36")


}